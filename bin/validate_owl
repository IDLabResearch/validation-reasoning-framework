#!/usr/bin/env node

const path = require('path');
const os = require("os");
const fs = require("fs");
const Validator = require('../lib/Validator');
const argv = require('minimist')(process.argv.slice(2));

let basePath = path.resolve(__dirname, '..');

let profile = 'owl';
let distPath = path.resolve(basePath, 'dist', 'n3unit.pvm');
let queryPath = argv.count ? path.resolve(basePath, 'resources', 'rules', 'query_count.n3') : path.resolve(basePath, 'resources', 'rules', 'query.n3');
let profilePath = path.resolve(basePath, 'profiles', profile + '.n3');

let validationOpts = {
  queryPath,
  extraFiles: [distPath, profilePath]
};


if (!argv.i) {
  console.log('-i is required!');
  process.exit(-1);
}
if (!argv.o) {
  console.log('-o is required!');
  process.exit(-1);
}
if (argv.ram) {
  validationOpts.ram = argv.ram;
}
let sourcePath = argv.i;
let outputPath = argv.o;
let schemas = argv.s ? argv.s.split(',') : null;

if (schemas) {
  const prefices = JSON.parse(fs.readFileSync(path.resolve(basePath, 'resources', 'ontologies', 'prefix.json')));
  schemas = schemas.map(function (schema) {
    return prefices[schema] ? {uri: prefices[schema]} : {prefix: schema}
  });
}

let validator = new Validator(validationOpts);

const startTime = new Date();
const extrafiles = [];
if (argv.r) {
  let profiles = argv.r.split(',');
  if (profiles.indexOf('rdfs') >= 0) {
    extrafiles.push({
      path: path.resolve(basePath, 'resources/rules/reasoning/rdfs_rules.n3'),
      type: 'n3'
    });
  }
  if (profiles.indexOf('owl') >= 0) {
    extrafiles.push({
      path: path.resolve(basePath, 'resources/rules/reasoning/owl_rules.n3'),
      type: 'n3'
    });
  }
}
validator.validateStreamFileByOntologies(sourcePath, schemas, extrafiles, function (err, child) {
  if (err) {
    throw err;
  }
  let outStream = fs.createWriteStream(outputPath, 'utf8');
  child.stderr.pipe(process.stderr);
  child.stdout.pipe(outStream);
  child.on('close', function (code) {
    if (code !== 0) {
      throw new Error("Couldn't reason: code " + code);
    }
    const endTime = new Date();
    console.log(`done in ${endTime.getTime() - startTime.getTime()}!`);
  });
});
